//This is Sports Tracker Registration module version 2.0.1a Alpha
package fingerprint.authenticator;

import com.digitalpersona.uareu.Engine;
import com.digitalpersona.uareu.Fid;
import com.digitalpersona.uareu.Fmd;
import com.digitalpersona.uareu.Reader;
import com.digitalpersona.uareu.ReaderCollection;
import com.digitalpersona.uareu.UareUException;
import com.digitalpersona.uareu.UareUGlobal;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.SecureRandom;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.Painter;
import javax.swing.SwingWorker;



/**
 *
 * @author emapps
 */
public class Main extends javax.swing.JFrame implements ActionListener {

    private static final Random RANDOM = new SecureRandom();
    private static final long serialVersionUID = 1;


    private static final String ACT_SELECTION = "selection";
    private static final String ACT_CAPTURE = "capture";
    private static final String ACT_STREAMING = "streaming";
    private static final String ACT_VERIFICATION = "verification";
    private static final String ACT_IDENTIFICATION = "identification";
    private static final String ACT_ENROLLMENT = "enrollment";
    private static final String ACT_EXIT = "exit";

    private JDialog m_dlgParent;
    private JTextArea m_textReader;

    private ReaderCollection m_collection;
    private Reader m_reader;
    private Fmd enrollmentFMD;

    private static final String ACT_BACK = "back";
    private static final String ACT_LOAD = "load";
    private static final String ACT_LOAD_FROM_DB = "load_from_db";

    private CaptureThread m_capture;

    private Fmd[] m_fmds;

    public FingerDB db = new FingerDB("localhost", "uareu", "root", "password");
    public List<FingerDB.Record> m_listOfRecords = new ArrayList<FingerDB.Record>();
    public List<Fmd> m_fmdList = new ArrayList<Fmd>();
    public Fmd[] m_fmdArray = null;  //Will hold final array of FMDs to identify against

    public Fmd m_enrollmentFmd;

    HashMap<String, Object> mapper = new HashMap();
    private final String m_strPrompt1 = "Verification started\n    put any finger on the reader\n\n";
    private final String m_strPrompt2 = "    put the same or any other finger on the reader\n\n";

    /**
     * Creates new form Main
     */
    public Main() {

        initComponents();
        BurstTimer();

    }

    public static String generateRandomPassword() {
        // Pick from some letters that won't be easily mistaken for each
        // other. So, for example, omit o O and 0, 1 l and L.
        String letters = "abcdefghjkmnpqrstuvwxyzABCDEFGHJKMNPQRSTUVWXYZ23456789+@";

        String pw = "";
        for (int i = 0; i < 50; i++) {
            int index = (int) (RANDOM.nextDouble() * letters.length());
            pw += letters.substring(index, index + 1);
        }
        return pw;
    }

    public void startLogger() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        dp = new javax.swing.JDesktopPane();
        jToolBar1 = new javax.swing.JToolBar();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jToolBar2 = new javax.swing.JToolBar();
        m_loadFromDB = new javax.swing.JButton();
        m_load = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextArea1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        m_text = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jDesktopPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jToolBar1.setBackground(new java.awt.Color(0, 0, 0));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton4.setBackground(new java.awt.Color(204, 204, 204));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fingerprint/authenticator/datacaptured.gif"))); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/fingerprint/authenticator/uoprocessing.gif"))); // NOI18N
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("High Jump Terminal");
        jToolBar1.add(jLabel2);

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        m_loadFromDB.setText("LOAD DB");
        m_loadFromDB.setFocusable(false);
        m_loadFromDB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        m_loadFromDB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(m_loadFromDB);

        m_load.setText("FMD MANUAL");
        m_load.setFocusable(false);
        m_load.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        m_load.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(m_load);

        jButton3.setText("HELP");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jButton3);

        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setText("jLabel1");
        jToolBar2.add(jTextArea1);

        m_text.setColumns(20);
        m_text.setRows(5);
        jScrollPane1.setViewportView(m_text);

        javax.swing.GroupLayout dpLayout = new javax.swing.GroupLayout(dp);
        dp.setLayout(dpLayout);
        dpLayout.setHorizontalGroup(
            dpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        dpLayout.setVerticalGroup(
            dpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dpLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        dp.setLayer(jToolBar1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dp.setLayer(jToolBar2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        dp.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(dp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(513, Short.MAX_VALUE))
            .addComponent(dp)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        try {
            this.m_collection = UareUGlobal.GetReaderCollection();
            m_collection.GetReaders();
        } catch (UareUException e1) {
            // TODO Auto-generated catch block
            JOptionPane.showMessageDialog(null, "Error getting collection");
            return;
        }

        if (m_collection.size() == 0) {
            MessageBox.Warning("Reader is not selected");
            return;
        }

        m_reader = m_collection.get(0);

        if (null == m_reader) {
            MessageBox.Warning("Reader is not selected");
        } else {
            m_enrollmentFmd = this.enrollmentFMD;
            m_reader = m_reader;
            m_fmds = new Fmd[2];
            //     Verification.Run(m_reader, this.enrollmentFMD);
            try {

                m_reader.Open(Reader.Priority.COOPERATIVE);

            } catch (UareUException e) {
                MessageBox.DpError("Reader.Open()", e);
            }

            startLoading();

            //start capture thread
            StartCaptureThread();

        }

// throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
// TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
    public void startFingerLoading() {
        try {
            this.m_collection = UareUGlobal.GetReaderCollection();
            m_collection.GetReaders();
        } catch (UareUException e1) {
            // TODO Auto-generated catch block
            JOptionPane.showMessageDialog(null, "Error getting collection");
            return;
        }

        if (m_collection.size() == 0) {
            MessageBox.Warning("Reader is not selected");
            return;
        }

        m_reader = m_collection.get(0);

        if (null == m_reader) {
            MessageBox.Warning("Reader is not selected");
        } else {
            m_enrollmentFmd = this.enrollmentFMD;
            m_reader = m_reader;
            m_fmds = new Fmd[2];
            //     Verification.Run(m_reader, this.enrollmentFMD);
            try {

                m_reader.Open(Reader.Priority.COOPERATIVE);

            } catch (UareUException e) {
                MessageBox.DpError("Reader.Open()", e);
            }

            startLoading();

            //start capture thread
            StartCaptureThread();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane dp;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jTextArea1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JButton m_load;
    private javax.swing.JButton m_loadFromDB;
    private javax.swing.JTextArea m_text;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals(ACT_BACK)) {
            //cancel capture
            StopCaptureThread();
            m_dlgParent.setVisible(false);
        } else if (e.getActionCommand().equals(ACT_LOAD_FROM_DB)) {

            try {
                ConsoleMsg("Opening Database Connection ...");
                ConsoleMsg(("Connecting ..... "));
                db.Open();

                this.m_listOfRecords = db.GetAllFPData();
                for (FingerDB.Record record : this.m_listOfRecords) {
                    Fmd fmd = UareUGlobal.GetImporter().ImportFmd(record.fmdBinary, com.digitalpersona.uareu.Fmd.Format.DP_REG_FEATURES, com.digitalpersona.uareu.Fmd.Format.DP_REG_FEATURES);
                    this.m_fmdList.add(fmd);
                }
                m_fmdArray = new Fmd[this.m_fmdList.size()];
                this.m_fmdList.toArray(m_fmdArray);
                ConsoleMsg("Data Saved Localy ");
                ConsoleMsg("Loading Info of Users ");
                //       loadDbinMem();
            } catch (SQLException e1) {
                // TODO Auto-generated catch block
                MessageBox.DpError("Failed to load FMDs from database.  Please check connection string in code.", null);
                return;
            } catch (UareUException e1) {
                // TODO Auto-generated catch block
                JOptionPane.showMessageDialog(null, "Error importing fmd data.");
                return;
            }

            this.m_load.setEnabled(false); //Dont allow user to load fmd from file (confusing).
            this.m_enrollmentFmd = null;

        } else if (e.getActionCommand().equals(CaptureThread.ACT_CAPTURE)) {
            //process result
            CaptureThread.CaptureEvent evt = (CaptureThread.CaptureEvent) e;
            if (evt.capture_result.image != null) {
                if (ProcessCaptureResult(evt)) {
                    //restart capture thread
                    WaitForCaptureThread();
                    StartCaptureThread();
                } else {
                    //destroy dialog
                    m_dlgParent.setVisible(false);
                }
            }
        }
    }

    private void StartCaptureThread() {
        m_capture = new CaptureThread(m_reader, false, Fid.Format.ANSI_381_2004, Reader.ImageProcessing.IMG_PROC_DEFAULT);
        m_capture.start(this);
    }

    public static void tone(final int hz, final int msecs, final double vol)
            throws LineUnavailableException {

        new SwingWorker<Object, Object>() {

            @Override
            protected Object doInBackground() throws Exception {
                byte[] buf = new byte[1];
                AudioFormat af
                        = new AudioFormat(
                                8000f, // sampleRate
                                8, // sampleSizeInBits
                                1, // channels
                                true, // signed
                                false);      // bigEndian
                SourceDataLine sdl = AudioSystem.getSourceDataLine(af);
                sdl.open(af);
                sdl.start();
                for (int i = 0; i < msecs * 8; i++) {
                    double angle = i / (8000f / hz) * 2.0 * Math.PI;
                    buf[0] = (byte) (Math.sin(angle) * 127.0 * vol);
                    sdl.write(buf, 0, 1);
                }
                sdl.drain();
                sdl.stop();
                sdl.close();
                return null;
//  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        }
                .execute();

    }

    private void StopCaptureThread() {
        if (null != m_capture) {
            m_capture.cancel();
        }
    }

    private void WaitForCaptureThread() {
        if (null != m_capture) {
            m_capture.join(10000);

        }
    }

    public void bajao() {
        try {
            tone(1000, 100, 0.9);
        } catch (LineUnavailableException ex) {
            java.util.logging.Logger.getLogger(Verification.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void longbajao() {
        try {
            tone(5000, 500, 0.9);
        } catch (LineUnavailableException ex) {
            java.util.logging.Logger.getLogger(Verification.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setImage(String rollnumber) {
        m_text.setText("");
        Object obj = mapper.get(String.valueOf(rollnumber.trim()));
        java.awt.Image imag;

        imag = Toolkit.getDefaultToolkit().createImage(((candidate) obj).getPhoto());

        ImageIcon icon = new ImageIcon(imag);
        JLabel picLabel = new JLabel(icon);
        picLabel.setText("Candidate Information .. ");
        JTextArea ja = new JTextArea();
        ja.setText("Fingerprint Verification \n\n "
                + "*******" + db.getInfoDetails(rollnumber));
        ;
        JOptionPane.showMessageDialog(null, ja, "Candidate  " + rollnumber.trim(), JOptionPane.INFORMATION_MESSAGE, icon);

    }

    public void setImageII(byte[] rollnumber, String cname, String fname, String dob) {
        m_text.setText("");

        java.awt.Image imag;

        imag = Toolkit.getDefaultToolkit().createImage(rollnumber);

        ImageIcon icon = new ImageIcon(imag);
        JLabel picLabel = new JLabel(icon);
        picLabel.setText("Candidate Information .. ");
        JTextArea ja = new JTextArea();
        ja.setText("************************************ \n "
                + "Candidate Name : " + cname + "\n "
                + "Candidate Father Name : " + fname + " \n"
                + "*************************************  ");

        JOptionPane.showMessageDialog(null, ja, "Candidate  ", JOptionPane.INFORMATION_MESSAGE, icon);

    }

    protected void loadDbinMem() {

        new SwingWorker<Object, Object>() {

            @Override
            protected Object doInBackground() throws Exception {
                ConsoleMsg("Please Wait Loading Candidate Info");
                try {
                    mapper = db.getDictionaryHashes();

                } catch (ClassNotFoundException ex) {

                } catch (SQLException ex) {

                }
                ConsoleMsg("Loading Completed....");
                return null;

//throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        }.execute();
    }

    public void startLoading() {
        new SwingWorker<Object, Object>() {

            @Override
            protected void done() {
                bajao();
                ConsoleMsg("Loading Completed "); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            protected void process(List<Object> chunks) {
                super.process(chunks); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            protected Object doInBackground() throws Exception {

                Thread.sleep(2000);
                try {
                    ConsoleMsg("Opening Database Connection ...");
                    ConsoleMsg(("Connecting ..... "));
                    ConsoleMsg(("This Process may take 1 Min. ..... "));
                    ConsoleMsg(("Be Patient  ..... "));
                    db.Open();

                    m_listOfRecords = db.GetAllFPData();
                    for (FingerDB.Record record : m_listOfRecords) {
                        Fmd fmd = UareUGlobal.GetImporter().ImportFmd(record.fmdBinary, com.digitalpersona.uareu.Fmd.Format.DP_REG_FEATURES, com.digitalpersona.uareu.Fmd.Format.DP_REG_FEATURES);
                        m_fmdList.add(fmd);
                    }
                    m_fmdArray = new Fmd[m_fmdList.size()];
                    m_fmdList.toArray(m_fmdArray);

                    //  loadDbinMem();
                } catch (SQLException e1) {
                    // TODO Auto-generated catch block
                    ConsoleMsg("ERROR MESSAGE " + e1.getMessage());
                    MessageBox.DpError("Failed to load FMDs from database.  Please check connection string in code.", null);

                } catch (UareUException e1) {

                }

                return null;
//throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        }.execute();
    }

    public void ConsoleMsg(String msg) {

        m_text.append("\n" + msg);
        m_text.setCaretPosition(m_text.getDocument().getLength());
    }

    private boolean ProcessCaptureResult(CaptureThread.CaptureEvent evt) {
        boolean bCanceled = false;
        bajao();
        ConsoleMsg("\n Searching for Fingerprint In Database Please Wait \n\n Search In Progress ...");

        if (this.m_enrollmentFmd == null && this.m_listOfRecords.size() == 0) {
            MessageBox.Warning("You cannot verify until you register or load a template.");
            m_loadFromDB.doClick();
            return !bCanceled;
        }

        if (null != evt.capture_result) {
            if (null != evt.capture_result.image && Reader.CaptureQuality.GOOD == evt.capture_result.quality) {
                //extract features
                Engine engine = UareUGlobal.GetEngine();

                try {
                    //   m_imagePanel.showImage(evt.capture_result.image);
                    Fmd fmd = engine.CreateFmd(evt.capture_result.image, Fmd.Format.DP_VER_FEATURES);
                    m_fmds[0] = fmd;

                    //Lets perform 1:1 comparison
                    if (this.m_enrollmentFmd != null) {
                        m_fmds[1] = this.m_enrollmentFmd;

                        try {
                            int falsematch_rate = engine.Compare(m_fmds[0], 0, m_fmds[1], 0);
                            int target_falsematch_rate = Engine.PROBABILITY_ONE / 100000; //target rate is 0.00001
                            if (falsematch_rate < target_falsematch_rate) {

                                m_text.append("MATCHED !!!\n");
                                String str = String.format("    dissimilarity score: 0x%x.\n", falsematch_rate);
                                m_text.append(str);
                                str = String.format("    false match rate: %e.\n\n\n", (double) (falsematch_rate / Engine.PROBABILITY_ONE));
                                m_text.append(str);
                            } else {
                                longbajao();
                                m_text.append("NO MATCH!!!\n\n\n");
                            }
                        } catch (UareUException e) {
                            MessageBox.DpError("Engine.Compare exception()", e);
                        }

                        //discard FMDs
                        m_fmds[0] = null;
                        m_fmds[1] = null;

                    } else //Perform identification
                    {
                        int target_falsematch_rate = Engine.PROBABILITY_ONE / 100000; //target rate is 0.00001
                        Engine.Candidate[] matches = engine.Identify(m_fmds[0], 0, m_fmdArray, target_falsematch_rate, 1);
                        if (matches.length == 1) {
                            ConsoleMsg("\n\n User Found : Details Loading ...");
System.out.println("***************"+this.m_listOfRecords.get(matches[0].fmd_index).userID);
                            if (db.getWorkOutInfoHasRun100M(this.m_listOfRecords.get(matches[0].fmd_index).userID, 1).startsWith("NOTRUN")) {
                                StopCaptureThread();
                                WaitForCaptureThread();

                                //close reader
                                try {
                                    m_reader.Close();
                                } catch (UareUException e) {
                                    MessageBox.DpError("Reader.Close()", e);
                                }

                            } else {
                                try {
                                    new TestSplashScreen().initUI(this.m_listOfRecords.get(matches[0].fmd_index).userID +"\n "+this.m_listOfRecords.get(matches[0].fmd_index).cname + "\n"+ "Reentered ");
                                } catch (MalformedURLException ex) {
                                    java.util.logging.Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                                }

                            }

                        //    setImageII(this.m_listOfRecords.get(matches[0].fmd_index).photo0, this.m_listOfRecords.get(matches[0].fmd_index).cname, this.m_listOfRecords.get(matches[0].fmd_index).fname, "");
                        } else {
                            ConsoleMsg("\n\n User NOT FOUND  ...");
                            longbajao();
                        }
                    }
                } catch (UareUException e) {
                    MessageBox.DpError("Engine.CreateFmd()", e);
                }
            } else {
                //the loop continues
                m_text.append(m_strPrompt2);
            }
        } else if (Reader.CaptureQuality.CANCELED == evt.capture_result.quality) {
            //capture or streaming was canceled, just quit
            bCanceled = true;
        } else if (null != evt.exception) {
            //exception during capture
            MessageBox.DpError("Capture", evt.exception);
            bCanceled = true;
        } else if (null != evt.reader_status) {
            //reader failure
            MessageBox.BadStatus(evt.reader_status);
            bCanceled = true;
        } else {
            //bad quality
            MessageBox.BadQuality(evt.capture_result.quality);
        }

        return !bCanceled;
    }

    public void BurstTimer() {
        new SwingWorker<Object, Object>() {

            @Override
            protected Object doInBackground() throws Exception {

                final Timer timer = new Timer();
                timer.scheduleAtFixedRate(new TimerTask() {
                    int i = Integer.parseInt("30");

                    public void run() {
                        //   ConsoleMsg(generateRandomPassword());
                        System.out.println(i--);
                        jTextArea1.setText("   Fingerprint Verification Program .... Running ");
                        if ((i < 30) && (i > 20)) {

                            jTextArea1.setText("   Program by SOS Developer");
                        }
                        if ((i < 20) && (i > 10)) {
                            jTextArea1.setText("   Contact srprg@sos.org for any issues");
                        }
                        if ((i < 10) && (i > 1)) {
                            jTextArea1.setText("   ****** Have a Nice Day ********");
                        }
// long idleTime = 0 ;
//    long start = System.currentTimeMillis();
//    Point currLocation = MouseInfo.getPointerInfo().getLocation();
//    while(true){
//                            try {
//                                Thread.sleep(1000);
//                                Point newLocation = MouseInfo.getPointerInfo().getLocation();
//                                if(newLocation.equals(currLocation)){
//                                    //not moved
//                                    idleTime = System.currentTimeMillis() - start;
//                                }
//                                else{
//                                    System.out.printf("Idle time was: %s ms", idleTime);
//                                    idleTime=0;
//                                    start =  System.currentTimeMillis();
//                                    break;
//                                }
//                                currLocation = newLocation;
//                            } catch (InterruptedException ex) {
//                                java.util.logging.Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
//                            }

 //   }
                        if (i < 0) {

                            timer.cancel();

                            BurstTimer();

                        }

                    }
                }, 0, 1000);

                return null;
//throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        }.execute();
    }

    static class DesktopPainter implements Painter<JComponent> {

        private Image image;

        public DesktopPainter() {
            try {
                image = ImageIO.read(new URL("http://www.hdbackgroundspoint.com/wp-content/uploads/2013/09/hh.jpeg"));
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        @Override
        public void paint(Graphics2D g, JComponent object, int width, int height) {
            g.drawImage(image, 0, 0, width, height, null);
        }
    }
}
